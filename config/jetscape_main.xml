<?xml version="1.0"?>

<!-- Copyright (c) The JETSCAPE Collaboration, 2018 -->
<!-- Modular, task-based framework for simulating all aspects of heavy-ion collisions -->
<!-- For the list of contributors see AUTHORS. -->
<!-- Report issues at https://github.com/JETSCAPE/JETSCAPE/issues -->
<!-- or via email to bugs.jetscape@gmail.com -->
<!-- Distributed under the GNU General Public License 3.0 (GPLv3 or later). -->
<!-- See COPYING for details. -->

 <jetscape>

  <!-- General settings -->
  <nEvents> 100 </nEvents>
  <setReuseHydro> true </setReuseHydro>
  <nReuseHydro> 10 </nReuseHydro>

  <!-- Technical settings -->
  <debug> off </debug>
  <remark> off </remark>
  <vlevel> 0 </vlevel>
  <nEvents_printout> 100 </nEvents_printout>
  <enableAutomaticTaskListDetermination> true </enableAutomaticTaskListDetermination>

  <!--  JetScape Writer Settings -->
  <outputFilename>test_out</outputFilename>
  <JetScapeWriterAscii> off </JetScapeWriterAscii>
  <JetScapeWriterAsciiGZ> off </JetScapeWriterAsciiGZ>
  <JetScapeWriterHepMC> off </JetScapeWriterHepMC>
  <JetScapeWriterRootHepMC> off </JetScapeWriterRootHepMC>
  <JetScapeWriterFinalStatePartonsAscii> off </JetScapeWriterFinalStatePartonsAscii>
  <JetScapeWriterFinalStateHadronsAscii> off </JetScapeWriterFinalStateHadronsAscii>
  <JetScapeWriterQnVectorAscii>off</JetScapeWriterQnVectorAscii>
  <QnVector_pTmin>0</QnVector_pTmin>
  <QnVector_pTmax>6</QnVector_pTmax>
  <QnVector_NpT>30</QnVector_NpT>
  <QnVector_rapmin>-4</QnVector_rapmin>
  <QnVector_rapmax>4</QnVector_rapmax>
  <QnVector_Nrap>80</QnVector_Nrap>
  <QnVector_Norder>7</QnVector_Norder>
  <write_pthat> 0 </write_pthat>

  <!--  Random Settings. For now, just a global  seed. -->
  <!--  Note: It's each modules responsibility to adopt it -->
  <!--  Note: Most if not all modules should understand 0 to mean a random value -->
  <!--  Note: Both 0 and non-zero values require careful treatment in case of multi-threading -->
  <!--           An example implementation is in JetEnergyLossManager.cc -->
  <Random>
    <seed>0</seed>
  </Random>

  <!-- Inital State Module  -->
  <IS>
    <!-- x range [-grid_max_x, grid_max_x] -->
    <!-- y range [-grid_max_y, grid_max_y]-->
    <!-- longitudinal range [-grid_max_z, grid_max_z]-->
    <!-- in units of [fm] -->
    <grid_max_x> 15 </grid_max_x>
    <grid_max_y> 15 </grid_max_y>
    <grid_max_z> 0.2 </grid_max_z>
    <grid_step_x> 0.3 </grid_step_x>
    <grid_step_y> 0.3 </grid_step_y>
    <grid_step_z> 0.2 </grid_step_z>

    <Trento>
    <PhysicsInputs  projectile='Pb'
            target='Pb'
            sqrts='2760'
            cross-section='6.4'
            normalization='13.9'>
    </PhysicsInputs>
    <CutInputs  centrality-low='50'
          centrality-high='60'>
    </CutInputs>
    <TransInputs  reduced-thickness='0.0'
            fluctuation="1.2"
            nucleon-width="0.9"
            nucleon-min-dist="1.2">
    </TransInputs>
    <LongiInputs  mean-coeff="1.0"
            std-coeff="3.0"
            skew-coeff="0.0"
            skew-type="1"
            jacobian="0.8">
    </LongiInputs>
    </Trento>

    <!-- Options to read initial conditions from saved file  -->
    <initial_profile_path>../examples/test_hydro_files</initial_profile_path>
    <initial_Ncoll_list>../examples/test_hydro_files</initial_Ncoll_list>
  </IS>

  <!-- Hard Process -->
  <Hard>

    <!-- Parton Gun test with fixed pT and fixed IS pos = 0  -->
    <PGun>
      <name>PGun</name>
      <pT>100</pT>
      <parID>21</parID>
    </PGun>

    <!-- Pythia Gun -->
    <!-- Sensible defaults are set in the class. ptHat etc. get their own field -->
    <PythiaGun>
      <name>PythiaGun</name>
      <FSR_on>0</FSR_on>
      <pTHatMin>100</pTHatMin>
      <pTHatMax>120</pTHatMax>
      <eCM>5020</eCM>
      <!-- The soft momentum cutoff in GeV removes partons from the pythia gun. The default matches the PP19 setup. -->
      <softMomentumCutoff>2.0</softMomentumCutoff>
      <!-- You can add any number of additional lines to initialize pythia here -->
      <!-- Note that if the tag exists it cannot be empty (tinyxml produces a segfault) -->
      <LinesToRead>
        HardQCD:all = on
      </LinesToRead>
    </PythiaGun>

    <epemGun>
      <name>epemgun</name>
      <eCM>5020</eCM>
      <!-- You can add any number of additional lines to initialize pythia here -->
      <!-- Note that if the tag exists it cannot be empty (tinyxml produces a segfault) -->
      <LinesToRead>
        HadronLevel::all = off
      </LinesToRead>
    </epemGun>
  </Hard>

  <!--Eloss Modules -->
  <!-- Individual Eloss Modules run Eloss and Eloss Manager  -->
  <Eloss>

    <deltaT>0.1</deltaT>
    <formTime> -0.1</formTime>
    <maxT>20</maxT>
    <tStart> 0.6 </tStart> <!-- Start time of jet quenching, proper time, fm/c   -->
    <mutex>ON</mutex>
    <AddLiquefier> false </AddLiquefier>
    <lambdaQCD>0.2</lambdaQCD> <!-- 0.4 is the value chosen in JETSET -->

    <Matter>
      <name>Matter</name>
      <matter_on> 1 </matter_on>
      <Q0> 2.0 </Q0>
      <QS> 0.9 </QS>
      <T0> 0.16 </T0>
      <!--if initial_virtuality_pT == 1: pT of hard parton is used to compute initial virtuality in shower, initial_virtuality_pT == 0: use parton 3-momentum-->
      <initial_virtuality_pT> 1 </initial_virtuality_pT>
      <vir_factor> 0.25 </vir_factor>
      <in_vac> 1 </in_vac>
      <recoil_on> 0 </recoil_on>
      <broadening_on> 0 </broadening_on>
      <brick_med> 0 </brick_med>   <!-- Set brick_med to 1 while using Brick Hydro module-->
      <brick_length> 5.0 </brick_length>
      <hydro_Tc> 0.16 </hydro_Tc>
      <!-- Pick a qhat formula -->
      <!-- Type=0 : HTL Formula with both alpha_s fixed  -->
      <!-- Type=1 : HTL Formula with one running alpha_s and one fixed alpha_s  -->
      <!-- Type=2 : Constant q-hat; qhat=qhat0   -->
      <!-- Type=3 : qhat=qhat0*T^3  -->
      <!-- Type=4 : qhat=qhat0*s; s=entropy density  -->
      <!-- Type=5 : HTL q-hat with Virtuality dependent function 1/(1+A*pow(ln(Q2),2) + B*pow(ln(Q2),4))  -->
      <!-- Type=6 : HTL q-hat with Virtuality dependent function int e^{-Cx}/(1+A*pow(ln(Q2),1) + B*pow(ln(Q2),2)) -->
      <!-- Type=7 : HTL q-hat with Virtuality dependent function  int x^{C}(1-x)^{D}/(1+A*pow(ln(Q2),1) + B*pow(ln(Q2),2))-->
      <QhatParametrizationType> 0 </QhatParametrizationType>
      <qhat0> -2.0 </qhat0>  <!-- If Type=0, 1, 5,6,7 set qhat0 as negative since alphas will be used-->
      <alphas> 0.25 </alphas>
      <qhatA> 10.0 </qhatA>    <!-- Always positive, Used only if QhatParametrizationType=5,6,7  -->
      <qhatB> 10.0 </qhatB>    <!-- Always positive, Used only if QhatParametrizationType=5,6,7  -->
      <qhatC> 1.0 </qhatC>    <!-- (0,100) for Type=6, and (-10,100) for Type=7, Used only if QhatParametrizationType=6,7  -->
      <qhatD> 0.0 </qhatD>    <!-- (-10,100), Used only if QhatParametrizationType=7  -->
    </Matter>

    <Lbt>
      <name> Lbt </name>
      <Q0> 2.0 </Q0>
      <in_vac> 0 </in_vac>
      <only_leading> 0 </only_leading>
      <hydro_Tc> 0.16 </hydro_Tc>
      <alphas> 0.2 </alphas>
      <run_alphas>1</run_alphas>   <!-- 0 for fixed alpha_s and 1 for running alpha_s -->
    </Lbt>

    <Martini>
      <name > Martini </name>
      <Q0> 2.0 </Q0>
      <alpha_s> 0.3 </alpha_s>
      <pcut> 2.0 </pcut>
      <hydro_Tc> 0.16 </hydro_Tc>
      <recoil_on> 0 </recoil_on>
      <run_alphas>1</run_alphas>
      <path>../src/jet/Martini/</path>
    </Martini>

    <AdSCFT>
      <name> AdSCFT </name>
      <kappa> 0.36 </kappa>
      <T0> 0.16 </T0>
      <Q0> 2.0 </Q0>
      <in_vac> 0 </in_vac>
    </AdSCFT>

  </Eloss>

  <PartonPrinter>
      <Status>off</Status>
      <FileName>./FinalPartonsInfo.dat</FileName>
  </PartonPrinter>

  <!--Preequilibrium Dynamics Module -->
  <Preequilibrium>

    <!-- starting long. proper time for Preequilibrium dynamics -->
    <tau0>0.0</tau0>
    <!-- starting long. proper time for Preequilibrium dynamics outuput for hard probes -->
    <tauj>0.1</tauj>
    <!-- switching long. proper time from Preequilibrium dynamics to Hydrodynamics (Landau Matching) -->
    <taus>0.2</taus>
    <evolutionInMemory>1</evolutionInMemory>

    <!-- Individual Preequilibrium Dynamics models  -->
    <FreestreamMilne>
      <name>FreestreamMilne</name>
      <freestream_input_file>freestream_input</freestream_input_file>
      <!-- number of timesteps for the evolution, this defines the dtau = (taus - tauj)  / ntau -->
      <!-- in the case of <evolutionInMemory>1</evolutionInMemory> this will also set the time step for the hydro, make sure that it is small enough -->
      <ntau>50</ntau>
    </FreestreamMilne>

    <NullPreDynamics> </NullPreDynamics>

  </Preequilibrium>


  <!-- Create liquifier -->
  <Liquefier>
      <!--threshold_energy_switch = 1, use e_threshold; threshold_energy_switch = 0, use |e_threshold|*T-->
      <threshold_energy_switch>1</threshold_energy_switch>
      <e_threshold>2.0</e_threshold>

      <!-- CausalLiquefier -->
      <CausalLiquefier>
          <name>CausalLiquefier</name>
          <dtau>0.02</dtau><!-- fluid time step in [fm] -->
          <dx>0.3</dx><!-- fluid cell size in [fm] -->
          <dy>0.3</dy><!-- fluid cell size in [fm] -->
          <deta>0.2</deta><!-- fluid cell size -->
          <tau_delay>2.0</tau_delay><!-- in [fm] -->
          <time_relax>0.1</time_relax><!-- in [fm] -->
          <d_diff>0.08</d_diff><!-- in [fm] -->
          <width_delta>0.1</width_delta><!-- in [fm] -->
      </CausalLiquefier>
  </Liquefier>

  <!-- Hydro  Module  -->
  <Hydro>

    <AddLiquefier> false </AddLiquefier>

    <!-- Test Brick if bjorken_expansion_on="true", T(t) = T * (start_time[fm]/t)^{1/3} -->
    <Brick bjorken_expansion_on="false" start_time="0.6">
      <name>Brick</name>
      <T>0.2</T>
    </Brick>

    <!-- Test Gubser  -->
    <Gubser>
    </Gubser>

    <!-- Hydro from a file  -->
    <hydro_from_file>
      <name>Hydro from file </name>
      <read_in_multiple_hydro>1</read_in_multiple_hydro>
      <hydro_files_folder>../examples/test_hydro_files</hydro_files_folder>

      <!-- read in file type  -->
      <!-- hydro_type == 1 read in evo file from VISHNew -->
      <!-- hydro_type == 2 read in evo file from MUSIC -->
      <hydro_type>1</hydro_type>

      <boost_invariant_>1</boost_invariant_>
      <!-- VISHNew hydro evolution filename (hdf5 format) -->
      <VISH_file>../examples/test_hydro_files/VISH_evo.h5</VISH_file>
      <!-- flag whether read in viscous information -->
      <!-- (only works for VISHNew evo files) -->
      <load_viscous_info>0</load_viscous_info>

      <!-- PreEquilibrium evolution filename (plain binary format) -->
      <PreEq_file>../examples/test_hydro_files/evolution_all_xyeta_fs.dat</PreEq_file>

      <!-- MUSIC hydro evolution filename (plain binary format) -->
      <!-- the associated input file specifies the grid information -->
      <MUSIC_input_file>../examples/test_hydro_files/MUSIC_input</MUSIC_input_file>
      <MUSIC_file>../examples/test_hydro_files/MUSIC_evo.dat</MUSIC_file>
      <!-- transition temperature between QGP and Hadron Resonance Gas -->
      <T_c>0.154</T_c>

      <!-- read in hydro evo file every Ntau step -->
      <!-- (only works for MUSIC evo files) -->
      <read_hydro_every_ntau>1</read_hydro_every_ntau>
    </hydro_from_file>

    <!-- MUSIC  -->
    <MUSIC>
      <name>MUSIC</name>
      <MUSIC_input_file>music_input</MUSIC_input_file>
      <!--beastMode = 0: double precision, constant time step-->
      <!--beastMode = 1: float precision, constant time step-->
      <!--beastMode = 2: float precision, increased time step after 4 fm/ (can be used for soft sector only runs, otherwise the change in stepsize will lead to errors)-->
      <beastMode>0</beastMode>
      <!--starting time of the hydrodynamic evolution after the pre-equilibrium phase-->
      <Initial_time_tau_0>0.5</Initial_time_tau_0>
      <!--evolution output/storage parameters-->
      <output_evolution_to_file>0</output_evolution_to_file>
      <output_evolution_to_memory>1</output_evolution_to_memory>
      <surface_in_memory>1</surface_in_memory>
      <!--shear viscosity settings-->
      <shear_viscosity_eta_over_s>0.08</shear_viscosity_eta_over_s>
      <T_dependent_Shear_to_S_ratio>0</T_dependent_Shear_to_S_ratio>
      <eta_over_s_T_kink_in_GeV>0.16</eta_over_s_T_kink_in_GeV>
      <eta_over_s_low_T_slope_in_GeV>0.</eta_over_s_low_T_slope_in_GeV>
      <eta_over_s_high_T_slope_in_GeV>0.</eta_over_s_high_T_slope_in_GeV>
      <eta_over_s_at_kink>0.08</eta_over_s_at_kink>
      <!--bulk viscosity settings-->
      <temperature_dependent_bulk_viscosity>0</temperature_dependent_bulk_viscosity>
      <zeta_over_s_max>0</zeta_over_s_max>
      <zeta_over_s_T_peak_in_GeV>0.18</zeta_over_s_T_peak_in_GeV>
      <zeta_over_s_width_in_GeV>0.02</zeta_over_s_width_in_GeV>
      <zeta_over_s_lambda_asymm>0.0</zeta_over_s_lambda_asymm>
      <!--higher order transport coefficients-->
      <Include_second_order_terms>1</Include_second_order_terms>
      <!--freeze-out parameters-->
      <freezeout_temperature>0.15</freezeout_temperature>
      <Perform_CooperFrye_Feezeout>0</Perform_CooperFrye_Feezeout>
    </MUSIC>

    <!-- CLVisc  -->
    <CLVisc>
      <name>CLVisc</name>
      <cpu_block_size>1</cpu_block_size>
      <gpu_block_size>64</gpu_block_size>
      <device_type>gpu</device_type>
      <device_id> 0 </device_id>
      <etaos_xmin> 0.15 </etaos_xmin>
      <etaos_ymin> 0.08 </etaos_ymin>
      <etaos_left_slop> 0.0 </etaos_left_slop>
      <etaos_right_slop> 0.0 </etaos_right_slop>
      <tau0> 0.6 </tau0>
      <!-- *_skip is used to save less bulk data -->
      <ntau_skip> 10 </ntau_skip>
      <nx_skip> 2 </nx_skip>
      <ny_skip> 2 </ny_skip>
      <netas_skip> 2 </netas_skip>
      <!-- scale_factor: scale the initial entropy/energy density -->
      <scale_factor> 57 </scale_factor>
      <dtau> 0.02 </dtau>
      <result_directory>./</result_directory>
      <Perform_CooperFrye_Feezeout>0</Perform_CooperFrye_Feezeout>
    </CLVisc>

  </Hydro>

  <!-- Jet Hadronization Module -->
   <JetHadronization>
       <name>colored/colorless/hybrid</name>
       <take_recoil>1</take_recoil>
       <!--use eCMforHadronization only for pp collisions to introduce beam partons-->
       <!--recommended value for e+e- and AA = 0-->
       <!--in all hadronization modules put the full eCM here, this is distributed to the beam partons (1/6 for each one)-->
       <eCMforHadronization>5020</eCMforHadronization>
       <!--maximum energy level for mesons-->
       <reco_Mlevelmax>1</reco_Mlevelmax>
       <!--maximum energy level for baryons-->
       <reco_Blevelmax>1</reco_Blevelmax>
       <!--switch for recombination of Goldstone bosons-->
       <reco_goldstone>0</reco_goldstone>
       <!--squared maximum distance for recombination with thermal partons-->
       <thermreco_distmax>5.0</thermreco_distmax>
       <!--factor for recombination in the shower-->
       <shower_recofactor>1.0</shower_recofactor>
       <!--factor for recombination with thermal partons-->
       <thermal_recofactor>1.0</thermal_recofactor>
       <!--switch for recombination biased by the time of the partons-->
       <recobias_t>0</recobias_t>
       <hydro_Tc>0.16</hydro_Tc>
       <eta_max_boost_inv>2.0</eta_max_boost_inv> <!--only relevant for boost invariant hydro, max eta for thermal parton sampler-->
       <!--free-straming propagation of hadrons after hadronization-->
       <had_postprop>0.0</had_postprop>
       <!--free-streaming of partons before hadronization-->
       <part_prop>0.0</part_prop>
       <pythia_decays>on</pythia_decays> <!-- lets the particles given to pythia decay-->
       <tau0Max>10.0</tau0Max> <!-- only particles with tau0 < tau0Max (given in mm/c) can decay, increase to include weak decays-->
       <weak_decays>depracted</weak_decays> <!-- use the parameters pythia_decays and tau0Max, this parameter is only a dummy to make old xml files work-->
       <!-- You can add any number of additional lines to initialize pythia hadronization here -->
       <!-- Note that if the tag exists it cannot be empty (tinyxml produces a segfault) -->
       <!-- <LinesToRead> -->
       <!--   111:mayDecay = off  -->
       <!-- </LinesToRead> -->
       <reco_hadrons_in_pythia>1</reco_hadrons_in_pythia>
       <!-- Switch to include more pythia particles from an additional xml file with particle information -->
       <additional_pythia_particles>0</additional_pythia_particles>
       <!-- Path to file with additional particles for pythia (for higher reco_Mlevelmax)-->
       <additional_pythia_particles_path>../config/HH_LightExcitedMesons.xml</additional_pythia_particles_path>
   </JetHadronization>

  <!-- Particlization Module  -->
  <SoftParticlization>
    <!-- iSpectraSampler -->
    <iSS>
      <!-- read in file type  -->
      <!-- hydro_mode == 0 read in surface file from VISHNew -->
      <!-- hydro_mode == 1 read in surface file from MUSIC (2+1)D -->
      <!-- hydro_mode == 2 read in surface file from MUSIC (3+1)D -->
      <hydro_mode>1</hydro_mode>

      <!-- file path for the default input file  -->
      <iSS_input_file>../external_packages/iSS/iSS_parameters.dat</iSS_input_file>
      <!-- directory path where the hydro surface is stored  -->
      <iSS_working_path>.</iSS_working_path>
      <!-- file path for the default table files  -->
      <iSS_table_path>../external_packages/iSS/iSS_tables</iSS_table_path>
      <!-- file path for the default particle table files  -->
      <iSS_particle_table_path>../external_packages/iSS/iSS_tables</iSS_particle_table_path>
      <!-- hadron species list  0: PDG 2005; 1: UrQMD; 2: SMASH -->
      <afterburner_type>1</afterburner_type>

      <include_deltaf_shear>1</include_deltaf_shear>
      <include_deltaf_bulk>1</include_deltaf_bulk>
      <deltaf_type>20</deltaf_type>
      <number_of_repeated_sampling>1</number_of_repeated_sampling>
      <Perform_resonance_decays>1</Perform_resonance_decays>
    </iSS>
  </SoftParticlization>

  <!-- Hadronic Afterburner  -->
  <Afterburner>
    <!-- fragmentation hadrons in the afterburner only possible with hybrid hadronization-->
    <include_fragmentation_hadrons>0</include_fragmentation_hadrons>
    <!-- only the afterburner hadrons are written to a file -->
    <!-- if fragmentation hadrons are not included in the afterburner they are also written  -->
    <output_only_final_state_hadrons>1</output_only_final_state_hadrons>
    <!-- SMASH -->
    <SMASH>
      <name>SMASH</name>
      <SMASH_config_file>../external_packages/smash/smash_config.yaml</SMASH_config_file>
      <SMASH_particles_file>../external_packages/smash/smash_code/input/particles.txt</SMASH_particles_file>
      <SMASH_decaymodes_file>../external_packages/smash/smash_code/input/decaymodes.txt</SMASH_decaymodes_file>
      <!-- time in fm/c in the computational frame, when the simulation shoud be ended -->
      <end_time>1000.0</end_time>
      <!-- 0 - run the full afterburner, 1 - only decay the resonances without even propagation -->
      <only_decays>0</only_decays>
    </SMASH>
  </Afterburner>
</jetscape>
